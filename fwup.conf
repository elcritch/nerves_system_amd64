# Firmware configuration file for the Beaglebone Black

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

# This configuration file will create an image that
# has an MBR and the following 3 partitions:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | Boot partition (FAT32)     |
# | u-boot.img                 |
# | uenv.txt                   |
# | bzImage                     |
# +----------------------------+
# | p1*: Rootfs A (squashfs)   |
# +----------------------------+
# | p1*: Rootfs B (squashfs)   |
# +----------------------------+
# | p2: Application (FAT32)    |
# +----------------------------+
#
# The p1 partition points to whichever of Rootfs A or B that
# is active.

# The boot partition contains bzImage, and has
define(BOOT_PART_OFFSET, 1)
define(BOOT_PART_COUNT, 1024)

# Let the rootfs have room to grow up to 128 MiB and align
# it to the nearest 1 MB boundary
define(ROOTFS_A_PART_OFFSET, 2048)
define(ROOTFS_A_PART_COUNT, 262144)
define(ROOTFS_B_PART_OFFSET, 264192)
define(ROOTFS_B_PART_COUNT, 262144)

# Application partition. This partition can occupy all of the
# remaining space. Size it to fit the destination.
define(APP_PART_OFFSET, 526336)
define(APP_PART_COUNT, 1048576)

# Provision partition
define(PROV_PART_OFFSET, 1574912)
define(PROV_PART_COUNT, 20480) # 10mb


# Firmware metadata
meta-product = "Nerves Firmware"
meta-description = ""
meta-version = ${NERVES_SDK_VERSION}
meta-platform = "amd64"
meta-architecture = "x86_64"
meta-author = "Jaremy Creechley"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.

# file-resource boot.scr {
#     host-path = "${NERVES_SYSTEM}/images/boot.scr"
# }
file-resource bootx64.efi {
    host-path = "${NERVES_SYSTEM}/images/EFI/BOOT/bootx64.efi"
}
file-resource grub.cfg {
    host-path = "${NERVES_SYSTEM}/images/grub.cfg"
}
file-resource startup.nsh {
    host-path = "${NERVES_SYSTEM}/images/startup.nsh"
}
file-resource bzImage {
    host-path = "${NERVES_SYSTEM}/images/bzImage"
}
# file-resource efi-part.vfat {
#     host-path = "${NERVES_SYSTEM}/images/efi-part.vfat"
# }
file-resource rootfs.img {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0xc # FAT32
    }
    partition 3 {
        block-offset = ${PROV_PART_OFFSET}
        block-count = ${PROV_PART_COUNT}
        type = 0xc # FAT32
    }
}

mbr mbr-b {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0xc # FAT32
    }
    partition 3 {
        block-offset = ${PROV_PART_OFFSET}
        block-count = ${PROV_PART_COUNT}
        type = 0xc # FAT32
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)

        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        fat_setlabel(${BOOT_PART_OFFSET}, "BOOT")
        fat_mkdir(${BOOT_PART_OFFSET}, "boot")
    }

    on-resource bootx64.efi { fat_write(${BOOT_PART_OFFSET}, "boot/bootx64.efi") }
    on-resource grub.cfg { fat_write(${BOOT_PART_OFFSET}, "/boot/grub.cfg") }
    on-resource startup.nsh { fat_write(${BOOT_PART_OFFSET}, "startup.nsh") }
    on-resource bzImage { fat_write(${BOOT_PART_OFFSET}, "bzImage") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Initialize the app partition last so that the boot
        # partition can be written in one go.
        fat_mkfs(${APP_PART_OFFSET}, ${APP_PART_COUNT})
        fat_setlabel(${APP_PART_OFFSET}, "APPDATA")
        fat_mkfs(${PROV_PART_OFFSET}, ${PROV_PART_COUNT})
        fat_setlabel(${PROV_PART_OFFSET}, "PROVDATA")
    }
}

# Write the new firmware and Linux images, but don't
# commit them. That way if the user aborts midway, we
# still are using the original firmware.

# Since the upgrade won't run until it has been finalized, it's ok
# to write data as it is read.

task upgrade.a {
    # This task upgrades the A partition
    require-partition1-offset = ${ROOTFS_B_PART_OFFSET}

    verify-on-the-fly = true

    on-init {
        # Erase any old saved files from previous upgrades
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.pre")
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.pre")
        fat_rm(${BOOT_PART_OFFSET}, "startup.nsh.pre")
        fat_rm(${BOOT_PART_OFFSET}, "bzImage.pre")
    }

    on-resource bootx64.efi { fat_write(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.new") }
    on-resource grub.cfg { fat_write(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.new") }
    on-resource startup.nsh { fat_write(${BOOT_PART_OFFSET}, "startup.nsh.new") }
    on-resource bzImage { fat_write(${BOOT_PART_OFFSET}, "bzImage.new") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
      	# Switch over to boot the new firmware
        mbr_write(mbr-a)

        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi", "EFI/BOOT/bootx64.efi.pre")
        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg", "EFI/BOOT/grub.cfg.pre")
        fat_mv(${BOOT_PART_OFFSET}, "startup.nsh", "startup.nsh.pre")
        fat_mv(${BOOT_PART_OFFSET}, "bzImage", "bzImage.pre")

        # fat_mv(${BOOT_PART_OFFSET}, "bzImage.new", "bzImage")
        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.new", "EFI/BOOT/bootx64.efi")
        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.new", "EFI/BOOT/grub.cfg")
        fat_mv(${BOOT_PART_OFFSET}, "startup.nsh.new", "startup.nsh")
        fat_mv(${BOOT_PART_OFFSET}, "bzImage.new", "bzImage")
    }

    on-error {
        # Clean up in case something goes wrong
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.new")
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.new")
        fat_rm(${BOOT_PART_OFFSET}, "startup.nsh.new")
        fat_rm(${BOOT_PART_OFFSET}, "bzImage.new")
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition1-offset = ${ROOTFS_A_PART_OFFSET}

    verify-on-the-fly = true

    on-init {
        # Erase any old saved files from previous upgrades
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.pre")
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.pre")
        fat_rm(${BOOT_PART_OFFSET}, "startup.nsh.pre")
        fat_rm(${BOOT_PART_OFFSET}, "bzImage.pre")
    }

    on-resource bootx64.efi { fat_write(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.new") }
    on-resource grub.cfg { fat_write(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.new") }
    on-resource startup.nsh { fat_write(${BOOT_PART_OFFSET}, "startup.nsh.new") }
    on-resource bzImage { fat_write(${BOOT_PART_OFFSET}, "bzImage.new") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
      	# Switch over to boot the new firmware
        mbr_write(mbr-b)

        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi", "EFI/BOOT/bootx64.efi.pre")
        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg", "EFI/BOOT/grub.cfg.pre")
        fat_mv(${BOOT_PART_OFFSET}, "startup.nsh", "startup.nsh.pre")
        fat_mv(${BOOT_PART_OFFSET}, "bzImage", "bzImage.pre")

        # fat_mv(${BOOT_PART_OFFSET}, "bzImage.new", "bzImage")
        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.new", "EFI/BOOT/bootx64.efi")
        fat_mv(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.new", "EFI/BOOT/grub.cfg")
        fat_mv(${BOOT_PART_OFFSET}, "startup.nsh.new", "startup.nsh")
        fat_mv(${BOOT_PART_OFFSET}, "bzImage.new", "bzImage")
    }

    on-error {
        # Clean up in case something goes wrong
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/bootx64.efi.new")
        fat_rm(${BOOT_PART_OFFSET}, "EFI/BOOT/grub.cfg.new")
        fat_rm(${BOOT_PART_OFFSET}, "startup.nsh.new")
        fat_rm(${BOOT_PART_OFFSET}, "bzImage.new")
    }
}
